## 단일 타입

### unknown 타입

무엇이 할당될지 모를때 사용하는 타입이며 `any`와 유사하지만 타입검사를 강제하고 타입이 식별된 후에야 사용할 수 있기 때문에 any타입보다는 안전합니다.

> any 타입도 지양해야 하지만 어떤 값이 들어올지 예측할 수 없을때는 어쩔 수 없이 사용해야 합니다.

### never 타입

함수와 많이 관련되어 사용되는 타입. never라는 단어가 내포하고 이는 의미처럼 값을 반환할 수 없는 타입을 의미합니다.

값을 반환할 수없는 경우는 크게

- 에러를 던지는 경우
- 무한히 실행되는 경우

로 나눠볼 수 있습니다.

## 타입 조합

### 교차 타입

두 타입을 모두 가지고 있는 타입을 선언 할 때 사용합니다.

```ts
type ProductItem = {
    id: number;
}

type ProductItemHasName = ProductItem & { name: string }
```

### 유니언 타입

여러가지 타입 중 하나의 타입을 만족하는 타입을 선언할때 사용합니다.

### 인덱스 시그니쳐

속성 이름은 알 수 없지만 속성 이름의 타입을 알고 있을 때 사용하는 문법입니다.

```ts
[key: K] : T 
```

와 같이 선언할 수 있는데 속성 이름은 `K`타입을 가지고 속성값은 `T`의 타입을 가지도록 해야합니다.

### 인덱스드 엑세스 타입

다른 타입의 특정 속성이 가지는 타입을 조회하기 위해서 사용한다

```ts
interface Example {
    a: number
    b: string
    c: boolean
}

type IndexedAccess = Example["a"] // type number
type IndexedAccess2 = Example["a" | "b"] // type number | string
type IndexedAccess3 = Example["a" | "b" | "c"] // type number | string |  boolean
```

또한 배열의 요소 타입을 조회하기 위해 인덱스드 액세스 타입을 사용하는 경우가 있다.

배열 요소 또한 속성이 `number`이기 때문에 가능하다고 볼 수 있다.

### 맵드 타입

다른 타입을 기반으로한 타읍을 선언할 때 사용하는 문법인데, 인덱스 시그니처 문법을 사용해서 반복적인 타입 선언을 효과적으로 줄일 수 있다.

```ts
type Example = {
    a: number;
    b: string;
    c: boolean
}

type Subset<T> = {
    [K in keyof T]?: T[K]
}
```

맵드는 `readOnly`혹은 `?`와 같은 수식을 붙히거나 떼어줄 수 있다는 특징도 있습니다.

```ts
type ReadOnlyEx = {
    readonly a: number;
    readonly b: number;
}

type CreateMutable<Type> = {
    -readonly [Property in keyof Type]: Type[Property]
}

type ResultType = CreateMutable<ReadOnlyEx> // {a: number; b: number}
```

### 탬플릿 리터럴 타입

자바스크립트의 탬플릿 문자열을 이용하여 문자열 리터럴 타입을 선언 할 수 있는 문법이다.

```ts
type Protocol = 'HTTP' | 'TCP' | 'DB'
type ProtocolDefault = `${Protocol}-Default`
```

### 제네릭

정적언어에서 다양한 타입 간에 재사용성ㅇㄹ 높이기 위해 사용하는 문법이다. 타입스크립트도 정적 타입을 가지는 언어이기 때문에 제네릭을 지원한다.

